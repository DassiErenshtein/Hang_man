from flask import Flask, jsonify, request, abort, make_response
from flask_cors import CORS, cross_origin
from Player import player
from ast import literal_eval
from os import path
import random
from functools import wraps

app = Flask(__name__)
CORS(app, supports_credentials=True)
path_file_name = './users.json'


# עטיפת פונקציה לבדיקת חיבור משתמש באמצעות עוגיות
def check_is_login(func):
    @wraps(func)  # שימור מטא-נתונים של הפונקציה המקורית
    def wrapper(*args, **kwargs):
        # בדיקת קיום עוגייה בשם 'user_id'
        if request.cookies.get('user_id') == None:
            return abort(403)  # משתמש לא מחובר - גישת HTTP 403
        return func(*args, **kwargs)  # קריאה לפונקציה אם המשתמש מחובר

    return wrapper


# פונקציה לבדיקת תקינות תעודת זהות
def check_id(id):
    if len(id) != 9:  # אורך שגוי
        return False
    sum = 0  # סכום ספרות מחושב
    i1 = 1  # משקל חישוב לספרה
    check = int(id[-1])  # ספרת ביקורת
    id = id[0:-1]  # הסרת ספרת הביקורת
    for i in id:
        try:
            int(i)
        except ValueError:
            return False
        num = i1 * int(i)  # הכפלה במשקל
        while num >= 1:  # חישוב ספרות המספר
            sum += num % 10
            num -= num % 10
            num /= 10

        i1 = 1 if i1 == 2 else 2  # שינוי המשקל
    # בדיקה אם ספרת הביקורת תואמת
    return check == 10 - sum % 10 or check == 0 == sum % 10

# פונקציה לבדיקה אם השם מכיל רק אותיות
def check_name(name):
    # בדיקת כל התווים בשם
    for char in name:
        if char.isalpha():
            continue
        else:
            return False
    return True

# פונקציה לבדוק אם שחקן קיים לפי תעודת זהות
def exists_player(id):
    if path.exists(path_file_name):# בדיקה אם קובץ המשתמשים קיים
        with open(path_file_name, 'r', encoding="UTF-8") as f:
            list1 = f.readlines()
            for l in list1:
                l1 = l.removesuffix('\n')
                player = literal_eval(l1)# המרת מחרוזת לאובייקט
                if player['id'] == id:# בדיקת התאמה לתעודת זהות
                    return player
    return False


@cross_origin(app, supports_credentials=True)
@app.route('/login', methods=["GET"])
def login():
    user = request.json# קריאת נתוני המשתמש
    res = check_id(user['id'])# בדיקת תקינות תעודת זהות
    if (res == False):
        return abort(400)
    if path.exists(path_file_name): # בדיקה אם קובץ המשתמשים קיים
        with open(path_file_name, 'r', encoding="UTF-8") as f:
            list1 = f.readlines()
            for l in list1:
                if l != '\n':
                    l1 = l.removesuffix('\n')
                    try:
                        player = literal_eval(l1)# המרת מחרוזת לאובייקט
                    except:
                        return abort(500)
                    # אימות שם משתמש וסיסמה
                    if player['id'] == user['id'] and player['password'] == user['password']:
                        response = make_response(jsonify({"message": f"Hello {player['name']}!"}))
                        # הגדרת עוגיות עם נתוני המשתמש
                        response.set_cookie('user_name', player['name'], max_age=600, httponly=True)
                        response.set_cookie('user_id', player['id'], max_age=600, httponly=True)
                        return response
    return abort(405)# משתמש לא נמצא


@cross_origin(app, supports_credentials=True)
@app.route('/register', methods=["POST"])
def register():
    user = request.json
    res = check_id(user['id'])
    if res == False:
        return abort(400)
    res = check_name(user['name'])
    if res == False:
        return abort(400)
    if exists_player(user['id']) == False:
        new_player = player(user['name'], user['id'], user['password'])
        with open(path_file_name, 'a', encoding="UTF-8") as f:
            f.write("\n" + str(new_player))
        response = make_response(jsonify({"message": f"Hello {new_player.name}!"}))
        response.set_cookie('user_name', new_player.name, max_age=600, httponly=True)
        response.set_cookie('user_id', new_player.id, max_age=600, httponly=True)
        return response
    return abort(403)


@cross_origin(app, supports_credentials=True)
@app.route('/word', methods=["GET"])
@check_is_login
def take_word():
    num = request.json['num']
    num1 = request.json['lan']
    if num1 == 1:
        path1 = './words.txt'
        if num != None:
            with open(path1, 'r') as fi:
                words = fi.readlines()
                random.shuffle(words)
                return jsonify(words[num % len(words)])
        else:
            return abort(400)
    else:
        path1 = './hebrew.txt'
        if num != None:
            with open(path1, 'r', encoding="UTF-8") as fi:
                words = fi.readlines()
                random.shuffle(words)
                return jsonify(words[num % len(words)])
        else:
            return abort(400)


@cross_origin(app, supports_credentials=True)
@app.route('/add_game', methods=["POST"])
@check_is_login
def add_game():
    if path.exists(path_file_name):
        with open(path_file_name, 'r+', encoding="UTF-8") as fi:
            lines = fi.readlines()
            for index, value in enumerate(lines):
                l1 = value.removesuffix('\n')
                player1 = literal_eval(l1)
                if player1['id'] == id:
                    player1['sum_games'] += 1
                    if request.json['success'] == True:
                        player1['sum_wins'] += 1
                    player1['last_words'].append(request.json['word'].removesuffix('\n'))
                    player1['last_words'] = list(set(player1['last_words']))
                    lines[index] = str(player1) + "\n"
                    break
            fi.seek(0)
            fi.truncate()
            fi.writelines(lines)
    return jsonify("good")


@cross_origin(app, supports_credentials=True)
@app.route('/history', methods=["GET"])
def history():
    with open(path_file_name, 'r', encoding="UTF-8") as f:
        lines = f.readlines()
        for value in lines:
            l1 = value.removesuffix('\n')
            player1 = literal_eval(l1)
            if player1['id'] == id:
                return jsonify(player1)
    return abort(405)


@cross_origin(app, supports_credentials=True)
@app.route('/logout', methods=["GET"])
def log_out():
    response = make_response()
    response.set_cookie('user_name', "", max_age=0, httponly=True, secure=False)
    return response


if __name__ == "__main__":
    app.run(debug=True)

client:
from ast import literal_eval
from requests import session
session = session()
class hang_man:
    def __init__(self):
        self.basic_url = "http://127.0.0.1:5000"
        self.cookie = None
        self.user = {}
        self.hang_man = ["x-------x",
                         """ x-------x
|
|
|
|
|""",
"""x-------x
|       |
|       0
|
|
|""",
"""x-------x
|       |
|       0
|       |
|
|""",
"""x-------x
|       |
|       0
|      /|\ 
|
|""",
r"""x-------x
|       |
|       0
|      /|\ 
|      /
|""",
r"""x-------x
|       |
|       0
|      /|\ 
|      / \ 
|"""]
        self.english_letters={}
        self.hebrew_letters = {}
        self.letters()
    def letters(self):
        self.hebrew_letters = {
            'א': False, 'ב': False, 'ג': False, 'ד': False, 'ה': False,
            'ו': False, 'ז': False, 'ח': False, 'ט': False, 'י': False,
            'כ': False, 'ך': False, 'ל': False, 'מ': False, 'ם': False,
            'נ': False, 'ן': False, 'ס': False, 'ע': False, 'פ': False,
            'ף': False, 'צ': False, 'ץ': False, 'ק': False, 'ר': False,
            'ש': False, 'ת': False
        }
        self.english_letters = {
            'a': False, 'b': False, 'c': False, 'd': False, 'e': False,
            'f': False, 'g': False, 'h': False, 'i': False, 'j': False,
            'k': False, 'l': False, 'm': False, 'n': False, 'o': False,
            'p': False, 'q': False, 'r': False, 's': False, 't': False,
            'u': False, 'v': False, 'w': False, 'x': False, 'y': False,
            'z': False

        }
    def register(self):
        while True:
            response = session.post(f"{self.basic_url}/register",
                                    json={'name': input("input your name"), 'id': input("input id"), 'password': input("input password")})
            if response.status_code == 200:
                print(literal_eval(response.text)['message'])
                break
            elif (response.status_code == 400):
                print("invalid variables, try again")
            else:
                print("id exists!!")

    def login(self):
        while True:
            login = session.get(f"{self.basic_url}/login", json={'id': input("input id"), 'password': input("input password")})
            if login.status_code == 200:
                print(literal_eval(login.text)['message'])
                break
            elif (login.status_code == 400):
                print("you didnot fill good variables, try again")
                continue
            elif (login.status_code == 500):
                print("something wrong, please try again!")
            else:
                print("you need to register")
                self.register()
                break

    def start_game(self):
        num1 = self.check_is_number("""choose language:
                                        1- english
                                        2- hebrew""")
        while num1 != 1 and num1 != 2:
            num1 = self.check_is_number("choose language:"
                                        "1- english"
                                        "2- hebrew")
        my_characters = self.english_letters
        if num1 == 2:
            my_characters = self.hebrew_letters
        num = self.check_is_number("input which number that you want... (it won't less your options...😋)")
        word = session.get(f"{self.basic_url}/word",json={'num': num, 'lan': num1})

        while word.status_code == 403:
            print("you need to login")
            self.login()
            word = session.get(f"{self.basic_url}/word",
                               json={'num': num})
        if word.status_code == 500:
            print("something wrong, try again!")
            return
        word = word.json()
        i = 0
        encrypted_word = []
        for i1 in range(len(word) - 1):
            if word[i1] == " ":
                encrypted_word.append(" ")
            else:
                encrypted_word.append("_")
        while True:
            if i == len(self.hang_man):
                break
            print("".join(encrypted_word))
            print(self.hang_man[i])
            letter = input(f"input a letter, You have {len(self.hang_man) - i} times to tap!")
            while True:
                isaletter=self.is_a_letter(letter)
                if(isaletter == True and letter in my_characters and my_characters[letter]==False):
                    break
                if isaletter == False:
                    letter = input(f"Please enter a valid value!")
                    continue
                if letter in my_characters:
                    pass
                else:
                    letter = input(f"change the language!")
                    continue
                if my_characters[letter]==True:
                    letter = input(f"You have already chosen this letter!")
                    continue
            my_characters[letter]=True
            if letter in word:
                for i1 in range(len(word)):
                    if word[i1] == letter:
                        encrypted_word[i1] = letter
            else:
                i += 1
            if "_" in encrypted_word:
                continue
            else:
                break
        self.letters()
        if i == len(self.hang_man):
            a = session.post(f"{self.basic_url}/add_game", json={'success': False, 'word': word})
            while a.status_code != 200:
                print("you need to login!")
                self.login()
                a = session.post(f"{self.basic_url}/add_game",json={'success': False, 'word': word})
            if a.status_code == 200:
                print(f"you failed, try again! the word is: {''.join(word)}")
        else:
            a = session.post(f"{self.basic_url}/add_game", json={'success': True, 'word': word})
            while a.status_code == 403:
                print("you need to login!")
                self.login()
                a = session.post(f"{self.basic_url}/add_game", json={'success': True, 'word': word})
            if a.status_code == 200:
                print("you are a winner!! wow! you did it...!!👑👑👑🏆🎖")
            else:
                print("you have a problem, your game doesn't wrriten. sorry...🤔")
    def check_is_number(self, message):
        num = 0
        while True:
            try:
                num = int(input(message))
            except ValueError:
                print("you need to input just a number!")
                continue
            break
        return num

    def game(self):
        print(fr"""
          _    _
         | |  | |
         | |__| | __ _ _ __   __ _ _ __ ___   __ _ _ __
         |  __  |/ _' | '_ \ / _' | '_ ' _ \ / _' | '_ \
         | |  | | (_| | | | | (_| | | | | | | (_| | | | |
         |_|  |_|\__,_|_| |_|\__, |_| |_| |_|\__,_|_| |_|
                        __/ |
                       |___/
        """)
        while True:
            num = self.check_is_number("""what do you want to do:
                                    1- login
                                    2- register
                                    """)
            if num==1:
                self.login()
                break
            elif num==2:
                self.register()
                break
            else:
                print("Invalid value")
        while True:
            num = self.check_is_number("""what do you want to do:
                        1- start game
                        2- history
                        3- logout
                        """)
            if num == 1:
                self.start_game()
            if num == 2:
                self.history()
            if num == 3:
                session.get(f"{self.basic_url}/logout")
                print("you logged out")
                self.login()
            else:
                print("Invalid value")
    def history(self):
        response = session.get(f"{self.basic_url}/history")
        if response.status_code == 200:
            last = response.json()
            print("last words: " + ", ".join(last['last_words']))
            print("sum games: " + str(last['sum_games']))
            print("sum wins : " + str(last['sum_wins']))

        elif response.status_code==403:
            print("you need to login!!")
            self.login()
            self.history()
        else:
            print("error, try again!")

    def is_a_letter(self, letter):
        if (len(letter) != 1):
            return False
        return letter.isalpha()
if __name__ == "__main__":
    mygame = hang_man()
    mygame.game()